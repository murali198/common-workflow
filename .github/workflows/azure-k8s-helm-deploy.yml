name: azure-k8s-helm-deploy

on:
  workflow_call:
    inputs:
      cluster_name:
        required: true
        type: string
      cluster_resource_group:
        required: true
        type: string
      namespace:
        required: true
        type: string
      image_name:
        required: true
        type: string
      registry_name:
        required: true
        type: string
      secret-name:
        required: false
        type: string
        default: acr-image-pull-sec
      release_name:
        required: false
        type: string
      chart_path:
        required: true
        type: string
      helm_version:
        required: false
        type: string
        default: "latest"
      helm_file:
        required: false
        type: string
      runs_on:
        required: false
        type: string
        default: ubuntu-latest
    secrets:
      azure_cred:
        required: true
      registry_username:
        required: true
      registry_password:
        required: true
jobs:
  parse:
    if: ${{ !github.event.issue.pull_request && github.event.comment.body == '/Approved' }}
    runs-on: ${{inputs.runs_on}}
    outputs:
      deploy-environment: ${{ fromJSON(steps.issue_body_parser.outputs.payload).environment }}
      ci-run-number: ${{ fromJSON(steps.issue_body_parser.outputs.payload).runNumber }}
      image-tag: ${{ fromJSON(steps.issue_body_parser.outputs.payload).imageTag }}
    steps:
      - name: Comment on Issue
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: "Deployment Initiated ðŸš€"

      - name: Get Issue Data
        uses: peter-murray/issue-body-parser-action@v1
        id: issue_body_parser
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          issue_id: ${{ github.event.issue.number }}
          payload_marker: target_payload

  deploy-dev:
    needs: [parse]
    if: ${{ needs.parse.outputs.deploy-environment == 'Dev' }}
    runs-on: ${{inputs.runs_on}}

    steps:
      - uses: actions/checkout@v3
        name: Checkout the code

      - name: Get K8s context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.azure_cred }}
          cluster-name: ${{inputs.cluster_name}}
          resource-group: ${{inputs.cluster_resource_group}}

      - name: Create namespace if doesn't exist
        run: |
          kubectl create namespace ${{inputs.namespace}} --dry-run=client -o json | kubectl apply -f -

      - name: Create K8s secret for pulling image from ACR
        uses: Azure/k8s-create-secret@v1.1
        with:
          container-registry-url: ${{inputs.registry_name}}.azurecr.io
          container-registry-username: ${{ secrets.registry_username }}
          container-registry-password: ${{ secrets.registry_password }}
          secret-name: ${{inputs.secret-name}}

      - name: Bake deployment
        uses: azure/k8s-bake@v2.1
        with:
          renderEngine: "helm"
          helmChart: "${{inputs.chart_path}}"
          overrideFiles: "${{inputs.helm_file}}"
          helm-version: "${{inputs.helm_version}}"
          releaseName: "${{inputs.release_name}}"
          namespace: ${{inputs.namespace}}
        id: bake

      - name: Deploy application to Dev
        uses: Azure/k8s-deploy@v3.0
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{inputs.registry_name}}.azurecr.io/${{inputs.image_name}}:${{ needs.parse.outputs.image-tag }}
          imagepullsecrets: |
            ${{inputs.secret-name}}
          namespace: ${{inputs.namespace}}

      - uses: JasonEtco/create-an-issue@v2
        name: Create approval Issue for Prod
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENVIRONMENT: Prod
          RUNNUMBER: ${{ needs.parse.outputs.ci-run-number }}
          TAG: ${{ needs.parse.outputs.image-tag }}
        with:
          filename: .github/deploy-issue-template.md

  deploy-prod:
    needs: [parse]
    if: ${{ needs.parse.outputs.deploy-environment == 'Prod' }}
    runs-on: ${{inputs.runs_on}}

    steps:
      - uses: actions/checkout@v3
        name: Checkout the code

      - name: Deploy to PROD
        run: echo Simulating Deployment

  close-issue:
    needs: [deploy-dev, deploy-prod]
    if: ${{ always() }}
    runs-on: ${{inputs.runs_on}}

    steps:
      - name: Close Issue
        if: ${{ needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success' }}
        uses: peter-evans/close-issue@v1.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment: "Deployment Completed ðŸŒŸ"

      - name: Comment Issue
        if: ${{ needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure' }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: "Deployment Failed ðŸ’¥"
